<!DOCTYPE html>
<head>
	<meta charset="utf-8">
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>Groupe 42</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="./lib/concept-map.css" rel="stylesheet">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>
  <script src="https://code.jquery.com/jquery-2.1.3.min.js" type="text/javascript"></script>
  <script src="https://d3js.org/d3.v3.min.js" type="text/javascript"></script>
  <script src="https://d3js.org/d3.v4.min.js"></script>
  <script src="https://d3js.org/d3-color.v1.min.js"></script>
  <script src="https://d3js.org/d3-interpolate.v1.min.js"></script>
  <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
  <style>
    body { margin:0;position:fixed;top:0;right:0;bottom:0;left:0; }
    .province {
        fill: #000;
        stroke: #fff;
        stroke-width: 1px;
    }
    .province:hover {
        fill: #666;
    }
    .hidden {
        display: none;
    }
    div.tooltip {
        color: #222;
        background-color: #fff;
        padding: .5em;
        text-shadow: #f5f5f5 0 1px 0;
        border-radius: 2px;
        opacity: 0.9;
        position: absolute;
    }
  </style>
</head>

<body>
  <div class="container-fluid" id='main'>
    <div class="row">
      <div class="col-md-6">
        <h1>Groupe 42</h1>
      </div>
      <div class="col-md-6">
        <div class="form-group" id='form'>
          <label for="events">Evénement :</label>
          <select class="form-control" id="events">
          </select>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    var width = 972,
        height = 501;

    var svg = d3.select( "body" )
    .append( "svg" )
    .attr( "width", width )
    .attr( "height", height );

    var projection = d3.geoAlbersUsa().translate([width/2, height/2])
    var path = d3.geoPath().projection(projection);

    var tooltip = d3.select("body").append("div")
    .attr("class", "hidden tooltip");

    // select event
    var form = d3.select('#events');
    d3.json('events.json', function (err, data) {
      form.selectAll('option')
        .data(data)
        .enter()
        .append('option')
        .attr('value', function (d) {
        return d.name;
      })
        .text(function (d) {
        return d.name;
      });
    });
    var test = document.getElementById('events');
    test.addEventListener('change', function (e) {
      console.log(test.value);
    });

    // map

    d3.json("us_states.json", function(json) {

      // on récupère les valeurs de sum_scaled
      var values = []; 
      for (var i=0; i<json.features.length; i++){
        values.push(json.features[i][test.value+"_scaled"].sum_scaled);
      }
      var color = d3.scaleSequential(d3.interpolateYlOrRd)
      .domain([d3.min(values),d3.max(values)]);
			
      svg.selectAll("path")
        .data(json.features)
        .enter()
        .append("path")
        .attr("d", path)
      	.attr("stroke-width",2)
        .style("fill", function(d){
        var value = d[test.value+"_scaled"].sum_scaled;
        if (value){return color(value);} else {return"#ccc";}
      })
        .on("mousemove", function(d){
        d3.select(this).style("stroke","#000000");
        var mouse = d3.mouse(svg.node()).map(function(d){return parseInt(d);});
        tooltip.classed("hidden", false)
          .attr("style", "left:" + (mouse[0]+15)+"px;top:"+(mouse[1]-35)+"px")
          .html("<center><b>" + d.properties.name +"</b></br><i>" + d[test.value].nb_event + " events</i></br>Injuries : " + d[test.value].total_injuries + "</br>" +  "Deaths : "+ d[test.value].total_deaths + "</br>" + "Damage : " + d[test.value].total_damages + " $ </center>" );
      		}
        )
        .on("mouseout", function(){
        d3.select(this).style("stroke","");
        tooltip.classed("hidden", true);
      		}
        );
				
				d3.select('#events')
        	.on("change", function() {
          // on récupère les valeurs de sum_scaled
          var values = []; 
          for (var i=0; i<json.features.length; i++){
            values.push(json.features[i][test.value+"_scaled"].sum_scaled);
          }
          var color = d3.scaleSequential(d3.interpolateYlOrRd)
          .domain([d3.min(values),d3.max(values)]);
          // svg
          svg.selectAll("path")
          	.transition(duration=500)
            .style("fill", function(d){
            var value = d[test.value+"_scaled"].sum_scaled;
            if (value){return color(value);} else {return"#ccc";}
          })
          
        });

    }
           )

  </script>
</body>
